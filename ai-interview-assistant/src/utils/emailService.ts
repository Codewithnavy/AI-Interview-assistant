// Email service for sending interview results
// In a real application, this would integrate with services like SendGrid, AWS SES, etc.

export interface EmailData {
  to: string;
  subject: string;
  body: string;
  candidateName: string;
  score: number;
  summary: string;
}

export const generateEmailContent = (
  candidateName: string,
  score: number,
  summary: string,
  questions: Array<{ text: string; answer: string; score: number }>
): EmailData => {
  const scoreCategory = score >= 80 ? 'Excellent' : score >= 70 ? 'Good' : 'Needs Improvement';
  const recommendation = score >= 80 
    ? 'We are impressed with your performance and would like to move forward with the next round.'
    : score >= 70 
    ? 'You demonstrated solid technical knowledge. We will be in touch regarding next steps.'
    : 'We appreciate your time. While this particular role may not be the best fit, we encourage you to apply for other opportunities.';

  const subject = `Interview Results - ${candidateName}`;
  
  const body = `
Dear ${candidateName},

Thank you for taking the time to complete our AI-powered interview process. We have reviewed your responses and are pleased to share your results.

📊 INTERVIEW RESULTS:
• Overall Score: ${Math.round(score)}/100 (${scoreCategory})
• Recommendation: ${recommendation}

📝 AI SUMMARY:
${summary}

📋 QUESTION BREAKDOWN:
${questions.map((q, index) => `
Question ${index + 1}: ${q.text}
Your Answer: ${q.answer}
Score: ${q.score}/100
`).join('\n')}

🎯 NEXT STEPS:
${recommendation}

We appreciate your interest in joining our team and look forward to potentially working with you.

Best regards,
The Interview Team

---
This email was generated automatically by our AI Interview Assistant.
For any questions, please contact our HR team.
  `.trim();

  return {
    to: '', // Will be filled by the candidate's email
    subject,
    body,
    candidateName,
    score,
    summary,
  };
};

export const sendEmail = async (emailData: EmailData): Promise<boolean> => {
  try {
    // In a real application, this would call an email service API
    // For demo purposes, we'll simulate sending the email
    console.log('📧 Email would be sent:', {
      to: emailData.to,
      subject: emailData.subject,
      body: emailData.body,
    });
    
    // Simulate API call delay
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    return true;
  } catch (error) {
    console.error('Failed to send email:', error);
    return false;
  }
};

export const downloadResultsAsPDF = (candidateName: string, score: number, summary: string, questions: Array<{ text: string; answer: string; score: number }>) => {
  // Generate a simple text report that can be saved as a file
  const report = `
INTERVIEW RESULTS REPORT
========================

Candidate: ${candidateName}
Date: ${new Date().toLocaleDateString()}
Overall Score: ${Math.round(score)}/100

AI SUMMARY:
${summary}

QUESTION DETAILS:
${questions.map((q, index) => `
Question ${index + 1}:
${q.text}

Answer:
${q.answer}

Score: ${q.score}/100
${'='.repeat(50)}
`).join('\n')}

Generated by AI Interview Assistant
  `.trim();

  // Create and download the file
  const blob = new Blob([report], { type: 'text/plain' });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = `${candidateName.replace(/\s+/g, '_')}_Interview_Results.txt`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
};
